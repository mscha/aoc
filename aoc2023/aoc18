#!/usr/bin/env raku
use v6.d;
$*OUT.out-buffer = False;   # Autoflush

# Advent of Code 2023 day 18 -- https://adventofcode.com/2023/day/18

enum Direction <north east south west>;
sub left(Direction $d --> Direction) { Direction(($d - 1) % 4) }
sub right(Direction $d --> Direction) { Direction(($d + 1) % 4) }

class Position
{
    has Int $.x;
    has Int $.y;

    my Int %dx{Direction} = north, 0, east,1, south,0, west,-1;
    my Int %dy{Direction} = north,-1, east,0, south,1, west, 0;

    method neighbour(Direction $dir) { pos($!x+%dx{$dir}, $!y+%dy{$dir}) }
    method neighbours { Direction::.values.map: -> $dir { $.neighbour($dir) } }

    method move(Direction $dir, Int $count)
    {
        return pos($!x + $count × %dx{$dir}, $!y + $count × %dy{$dir});
    }

    method Str { "($!x,$!y)" }
    method gist { self.Str }

    method WHICH { ValueObjAt.new("Position|$!x|$!y") }
}
sub pos(Int() $x, Int() $y) { Position.new(:$x, :$y) }

grammar LagoonPlan
{
    rule TOP { <step>+ }

    rule step { <direction> <count> '(' <color> ')' }

    token direction { <[UDRL]> }
    token count { \d+ }
    token color { '#' <xdigit> ** 6 }
}

class Lagoon
{
    has Str $.plan;
    has Bool $.swapped = False;
    has Bool $.verbose = False;

    has Hash @.steps;
    has Position @.points;

    constant %DIR = U=>north, D=>south, L=>west, R=>east,
                    0=>east, 1=>south, 2=>west, 3=>north;

    submethod TWEAK
    {
        LagoonPlan.parse($!plan, :actions(self));
        self.follow-steps;
    }

    method swap($direction, $count, $color)
    {
        constant @DIRECTIONS = <R D L U>;
        constant %DIRECTION-MAP = :R(0), :D(1), :L(2), :U(3);

        my $direction1 = @DIRECTIONS[$color.substr(6)];
        my $count1 = $color.substr(1,5).parse-base(16);
        my $color1 = sprintf('#%05x%x', $count, %DIRECTION-MAP{$direction});

        say "# $direction $count ($color) -> $direction1 $count1 ($color1)" if $!verbose; 
        return $direction1, $count1, $color1;
    }

    method step($/)
    {
        # If the instruction and color were swapped, swap them back
        my ($direction, $count, $color) = $!swapped
                    ?? self.swap(~$<direction>, +$<count>, ~$<color>)
                    !! (~$<direction>, +$<count>, ~$<color>);
        @!steps.push: { :dir(%DIR{$direction}), :count($count), :color($color) };
    }

    method follow-steps(Position $start = pos(0,0))
    {
        my $pos = $start;
        @!points.push($pos);
        for @!steps -> %s {
            $pos .= move(%s<dir>, %s<count>);
            @!points.push($pos);
        }

        if @!points.tail eqv $start {
            @!points.pop;
        }
        else {
            die "Path ends at @!points.tail(), not $start!";
        }
        
        say "# points: @!points[]" if $!verbose;
    }

    method volume(Int $depth = 1)
    {
        # Use the shoelace formula to determine the area
        my $area = (@!points Z @!points.rotate(1))
                        .map(-> ($p,$q) { $p.x × $q.y - $p.y × $q.x })
                        .sum / 2;

        # We may have a negative area if we went anti-clockwise.
        # Also, add the outer part of the squares on the border
        $area = abs($area) + @!steps»<count>.sum / 2 + 1;

        return $area × $depth;
    }
}

sub MAIN(IO() $inputfile where *.f = 'aoc18.input', Bool :v(:$verbose) = False)
{
    my $plan = $inputfile.slurp;

    my $lagoon = Lagoon.new(:$plan, :$verbose);
    say "Part 1: $lagoon.volume() m³ of lava.";

    my $lagoon2 = Lagoon.new(:$plan, :swapped, :$verbose);
    say "Part 2: $lagoon2.volume() m³ of lava.";
}
