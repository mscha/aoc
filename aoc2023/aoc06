#!/usr/bin/env raku
use v6.d;
$*OUT.out-buffer = False;   # Autoflush

# Advent of Code 2023 day 6 -- https://adventofcode.com/2023/day/6

sub num-wins(Int $time, Int $dist)
{
    # We need to find the number of integer values t between 0 and time
    # for which t·(time-t) > dist.
    # First solve x·(time-x) = dist, or x² - time·x + dist = 0
    my $det = $time² - 4×$dist;
    return 0 if $det < 0;   # No real solutions if determinant negative
    my $x1 = ($time - sqrt($det))/2;
    my $x2 = ($time + sqrt($det))/2;

    # Now find the number of integers that are *strictly* between these
    # solutions (since we need to *break* the record to win)
    my $t1 = floor($x1) + 1;
    my $t2 = ceiling($x2) - 1;
    return $t2 - $t1 + 1;
}

sub MAIN(IO() $inputfile where *.f = 'aoc06.input', Bool :v(:$verbose) = False)
{
    my @lines = $inputfile.lines;
    my @times = @lines[0].comb(/\d+/)».Int;
    my @distances = @lines[1].comb(/\d+/)».Int;

    my @wins = (@times Z @distances).map(-> ($t, $d) { num-wins($t,$d) });
    say 'Part 1: ', [×] @wins;

    my $wins2 = num-wins(@times.join.Int, @distances.join.Int);
    say 'Part 2: ', $wins2;
}
