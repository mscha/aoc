#!/usr/bin/env raku
use v6.d;
$*OUT.out-buffer = False;   # Autoflush

# Advent of Code 2023 day 22 -- https://adventofcode.com/2023/day/22

class Position
{
    has Int $.x;
    has Int $.y;
    has Int $.z;

    method Str { "($!x,$!y,$!z)" }
    method gist { self.Str }

    method down { Position.new(:$!x, :$!y, :z($!z-1)) }

    method WHICH { ValueObjAt.new("Position|$!x|$!y|$!z") }
}
sub pos(Int() $x, Int() $y, Int() $z) { Position.new(:$x,:$y,:$z) }

class Brick
{
    has Position $.start;
    has Position $.end;

    method bottom { $!start.z }

    method positions
    {
        return ($!start.x..$!end.x X $!start.y..$!end.y X $!start.z..$!end.z)
                    .map(-> ($x,$y,$z) { pos($x,$y,$z) });
    }

    method bottom-positions
    {
        return ($!start.x..$!end.x X $!start.y..$!end.y X $!start.z)
                    .map(-> ($x,$y,$z) { pos($x,$y,$z) });
    }

    method drop { Brick.new(:start($!start.down), :end($!end.down)) }

    method from-spec(Brick:U: Str $spec)
    {
        my ($start, $end) = $spec.split('~').map(-> $xyz { pos(|$xyz.split(',')) });
        return Brick.new(:$start, :$end);
    }

    method Str { "$!start-$!end" }
    method gist { self.Str }
}

class Stack
{
    has Brick @.bricks;
    has Bool $.verbose = False;

    has Bool %.occupied{Position};

    submethod TWEAK { %!occupied{$_.positions} »=» True for @!bricks }

    method settle
    {
        my $dropped;
        repeat {
            $dropped = 0;
            for @!bricks.kv -> $i, $b {
                next if $b.bottom == 1;
                my $b1 = $b.drop;
                if none(%!occupied{$b1.bottom-positions}) {
                    say "$b drops to $b1" if $!verbose;
                    %!occupied{$b.positions}:delete;
                    %!occupied{$b1.positions} »=» True;
                    @!bricks[$i] = $b1;
                    $dropped++;
                }
            }
        } while $dropped > 0;
    }

    method count-safe-bricks-and-collateral-damage
    {
        # Determine
        #  - which bricks each bricks supports
        #  - by how many bricks each brick is supported
        my @supports = [] xx @!bricks;
        my @supported = 0 xx @!bricks;
        for @!bricks.kv -> $i, $b1 {
            for @!bricks.kv -> $j, $b2 {
                next if $i == $j;
                if $b1.positions ∩ $b2.drop.positions {
                    say "$b1 supports $b2" if $!verbose;
                    @supports[$i].append($j);
                    @supported[$j]++;
                }
            }
        }

        # A brick can safely be removed if all bricks it supports are supported
        # by at least two bricks
        my $count1 = @supports.grep(-> @i { all(@supported[@i]) ≥ 2 }).elems;

        # Now count the total "collateral damage" if we remove each block
        # We only have to consider the blocks that _can't_ be safely removed.
        my $count2 = 0;
        for @supports.grep(-> @i { any(@supported[@i]) == 1 }, :k) -> $i {
            say "Try removing brick $i..." if $!verbose;
            temp @supported;
            my @remove = $i;
            while @remove {
                # Remove the block, and decrease the supported count for blocks it supports
                my $j = @remove.shift;
                @supported[$_]-- for @supports[$j;*];

                # Find out which blocks are now no longer supported.  Count them, and
                # process those next.
                my @unsupported = @supports[$j].grep({ @supported[$_] == 0 });
                say " - removing $j removes support for @unsupported.join(',')" if $!verbose;
                $count2 += @unsupported;
                @remove.append(@unsupported);
            }
        }

        return ($count1, $count2);
    }

    method Str { ('----------', |@!bricks, '----------').join("\n") }
    method gist { self.Str }
}

sub MAIN(IO() $inputfile where *.f = 'aoc22.input', Int :$steps1 = 64, Int :$steps2 = 26501365; Bool :v(:$verbose) = False)
{
    my @bricks = $inputfile.lines.map(-> $l { Brick.from-spec($l) });
    my $stack = Stack.new(:@bricks, :$verbose);
    say "Start:\n$stack" if $verbose;

    $stack.settle;
    say "Settled:\n$stack" if $verbose;

    my ($part1, $part2) = $stack.count-safe-bricks-and-collateral-damage;
    say "Part 1: $part1 bricks can be disintegrated.";
    say "Part 2: $part2 other bricks would fall.";
}
