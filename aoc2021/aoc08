#!/usr/bin/env raku
use v6.d;
$*OUT.out-buffer = False;   # Autoflush

# Advent of Code 2021 day 8 -- https://adventofcode.com/2021/day/8

grammar DisplayLine
{
    rule TOP { <monitor-list> '|' <output-list> }

    rule monitor-list { <segment> + }
    rule output-list { <segment> + }

    token segment { <[a..g]>+ }
}

class Unscrambler
{
    has Str $.line is required;
    has Bool $.verbose = False;

    has Str @.monitor;
    has Str @.output;
    has Int $.value;

    has Str @!segments;
    has Int %!trans;

    sub strsort(Str() $s) { $s.comb.sort.join }

    submethod TWEAK {
        DisplayLine.parse($!line, :actions(self))
                or die "Unable to parse line: $!line";
        self.decode;
    }

    # DisplayLine grammar actions
    method monitor-list($/) { @!monitor = $<segment>».&strsort }
    method output-list($/) { @!output = $<segment>».&strsort }

    method decode {
        # First, determine the segments for 1, 4, 7 and 8.
        @!segments[1] = @!monitor.grep(*.chars == 2)[0];
        @!segments[4] = @!monitor.grep(*.chars == 4)[0];
        @!segments[7] = @!monitor.grep(*.chars == 3)[0];
        @!segments[8] = @!monitor.grep(*.chars == 7)[0]; # 'abcdefg'

        # 6 is the only digit with 6 segments that is NOT a superset of 1
        @!segments[6] = @!monitor.grep({ .chars == 6 && .comb ⊅ @!segments[1].comb })[0];

        # 9 is the only digit with 6 segments that is a superset of 4
        @!segments[9] = @!monitor.grep({ .chars == 6 && .comb ⊃ @!segments[4].comb })[0];

        # 0 is the remaining digit with 6 segments
        @!segments[0] = @!monitor.grep({ .chars == 6 && $_ ne any @!segments[6,9] })[0];

        # 3 is the only digit with 5 segments that is a superset of 1
        @!segments[3] = @!monitor.grep({ .chars == 5 && .comb ⊃ @!segments[1].comb })[0];

        # 5 is the only digit with 5 segments that is a subset of 6
        @!segments[5] = @!monitor.grep({ .chars == 5 && .comb ⊂ @!segments[6].comb })[0];

        # 2 is the remaining digit with 5 segments
        @!segments[2] = @!monitor.grep({ .chars == 5 && $_ ne any @!segments[3,5] })[0];

        # Now set up the translation table
        %!trans = @!segments.antipairs;

        # And finally, determine the decoded output value
        $!value = @!output.map({ %!trans{$_} }).join.Int;

        say "@!output.join(" "): $!value" if $!verbose;
    }
}

sub MAIN(IO() $inputfile where *.f = 'aoc08.input', Bool :v(:$verbose) = False)
{
    my @unscr = $inputfile.lines.map({ Unscrambler.new(:line($_), :$verbose) });

    my $count = @unscr».output».grep({ $_.chars == any 2,3,4,7 }).sum;
    say "Part 1: digits 1, 4, 7, or 8 appear $count times.";

    say "Part 2: the sum of the output values is { @unscr».value.sum }.";
}
