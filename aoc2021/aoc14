#!/usr/bin/env raku
use v6.d;
$*OUT.out-buffer = False;   # Autoflush

# Advent of Code 2021 day 14 -- https://adventofcode.com/2021/day/14

grammar PolymerSpecs
{
    rule TOP { <template> <insertion>+ }

    token template { <element>+ }
    rule insertion { <pair> '->' <element> }

    token pair { <element><element> }
    token element { <[A..Z]> }
}

class Polymer
{
    has Str $.specs is required;
    has Bool $.verbose = False;

    has Int %.pairs;
    has Str %.rules;

    has Int $.length = 0;
    has Int %.frequencies;
    has Int $.step-count = 0;

    submethod TWEAK
    {
        PolymerSpecs.parse($!specs, :actions(self))
            or die "Unable to parse specifications!";
        say "Initial length: $!length" if $!verbose;
    }

    method template($/) {
        my @elems = $/.comb;                    # 'N', 'N', 'C', 'B'
        %!frequencies = bag @elems;             # :N(2), :C(1), :B(1)
        %!pairs = bag @elems Z~ @elems[1..*];   # :NN(1), :NC(1), :CB(1)
        $!length = +@elems;                     # 4
    }

    method insertion($/)
    {
        %!rules{$<pair>} = ~$<element>;         # 'CH' => 'B'
    }

    method grow
    {
        # Each pair is replaced by two pairs, following the appropriate rule.
        my %new-pairs;
        for %!pairs -> $p {
            # Find the inserted character and increase its frequency.
            my $ins = %!rules{$p.key};
            %!frequencies{$ins} += $p.value;
            $!length += $p.value;

            # Generate the two new pairs and remember their frequency.
            my ($a, $b) = $p.key.comb;
            %new-pairs{$a ~ $ins} += $p.value;
            %new-pairs{$ins ~ $b} += $p.value;
        }
        %!pairs = %new-pairs;

        $!step-count++;
        say "After step $!step-count: length $!length" if $!verbose;
    }

    method strength { [R-] %!frequencies.values.minmax.bounds }
}

sub MAIN(IO() $inputfile where *.f = 'aoc14.input', Bool :v(:$verbose) = False)
{
    my $poly = Polymer.new(:specs($inputfile.slurp), :$verbose);

    $poly.grow for 1..10;
    say "Part 1: ", $poly.strength;

    $poly.grow for 11..40;
    say "Part 2: ", $poly.strength;
}
